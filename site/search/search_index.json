{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"API%20Reference/","title":"API Reference","text":"<p>API\u7ed3\u6784\u6a21\u677f\uff1a\u5217\u51fa\u6240\u6709\u6a21\u5757 --&gt; \u5217\u51fa\u8be5\u6a21\u5757\u4e0b\u6240\u6709\u5b50\u6a21\u5757\uff0c\u518d\u5217\u51fa\u6bcf\u4e2a\u5b50\u6a21\u5757\u4e0b\u7684\u6240\u6709class --&gt; \u5217\u51faclass\u7684\u7ee7\u627f\u5c42\u7ea7 --&gt; \u4e3b\u8981\u7684helpers --&gt; \u5217\u51fa\u6240\u6709\u7684\u51fd\u6570\u53ca\u5176\u529f\u80fd</p>"},{"location":"API%20Reference/#omagent-corecore","title":"omagent-core.core","text":"<ul> <li>Introduction</li> <li>Class hierarchy</li> <li>Main helpers</li> </ul>"},{"location":"API%20Reference/#classes","title":"Classes","text":"core.base.STM utility core.base.BotBase core.node.base.base.Node <p>class\u6a21\u677f\uff1aBases\u3001\u7b80\u4ecb\u3001\u7c7bconfig\u3001\u53c2\u6570\u3001\u51fd\u6570\u65b9\u6cd5</p>"},{"location":"API%20Reference/#corebasestm","title":"core.base.STM","text":"<p>Bases: pydantic.BaseModel</p> <p>Base class designed to manage state and configurations for a specific application context.</p> <ul> <li> <p>Class Configurations (<code>Config</code>)</p> <ul> <li><code>extra</code>: Set to <code>\"allow\"</code>, this allows the <code>STM</code> class to adapt to dynamic data structures without requiring predefined schemas for every possible field.</li> <li><code>arbitrary_types_allowed</code>: Set to <code>True</code>, this allows the model to use fields of any type, not limited to the types natively supported by Pydantic.</li> </ul> </li> <li> <p>Attributes</p> <ul> <li><code>image_cache</code>: <code>Dict = {}</code>.A dictionary intended to store cached images.</li> <li><code>token_usage</code>: <code>Dict = {}</code>A dictionary that tracks the usage of tokens, providing insights into token consumption or availability.</li> <li><code>former_results</code>: <code>Dict = {}</code>A dictionary to store the results of previous operations or computations.</li> <li><code>history</code>: <code>Dict = defaultdict(lambda: deque(maxlen=3))</code>This field is designed to record and limit the quantity of historical records, ensuring that only the most recent entries are retained for each key.</li> </ul> </li> <li>Methods<ul> <li> <p><code>has(key: str) -&gt; bool</code>: A method to check whether a given <code>key</code> corresponds to a named attribute of the class with a type annotation, or if the <code>key</code> exists within any additional model configurations. This method facilitates the dynamic inspection of the model's structure and configurations.</p> Parameters key(str) Returns key in self.annotations or key in self.model_extra Return type Bool </li> </ul> </li> </ul>"},{"location":"API%20Reference/#corebasebotbase","title":"core.base.BotBase","text":"<p>Bases: pydantic.BaseModel, abc.ABC</p> <p>Base class for the bot. It is designed to manage bot attributes, state transition mechanisms (STM), and callback handling with a focus on flexibility and extensibility.</p> <ul> <li>Configuration (<code>Config</code>)<ul> <li><code>arbitrary_types_allowed</code> (<code>bool</code>): Set to <code>True</code>, allows the model to include fields of arbitrary types that are not natively supported by Pydantic.</li> </ul> </li> <li>Attributes<ul> <li><code>name</code> (<code>Optional[str]</code>): Represents the name of the bot. It is optional and defaults to <code>None</code>. The name can be used for identification or logging purposes.</li> <li><code>stm_pool</code> (<code>ClassVar[Dict[str, STM]]</code>): A class-level dictionary that stores instances of <code>STM</code>. This pool allows for the management of state across different requests or contexts.</li> <li><code>callback</code> (<code>Optional[BaseCallback]</code>): Holds an instance that is responsible for handling callbacks. It defaults to an instance of <code>DefaultCallback</code> if not explicitly provided.</li> <li>(<code>property</code>)<code>request_id(self) -&gt; str</code>: A property that retrieves the ID of the current request.</li> <li>(<code>property</code>)<code>stm(self) -&gt; STM</code>: A property that retrieves or creates an <code>STM</code> instance associated with the current request ID.</li> </ul> </li> <li> <p>Methods</p> <ul> <li> <p>(<code>field_validator</code>) (<code>classmethod</code>) <code>get_type(name: str) -&gt; str</code>: Get the name of the class. If a <code>name</code> is provided, it returns the provided name; otherwise, it defaults to the class's name.</p> Parameters name(str) Returns cls.name or name Return type Str </li> <li> <p><code>set_request_id(request_id: str) -&gt; None</code>: A method to set the ID of the current request.</p> </li> <li><code>free_stm() -&gt; None</code>: Release the <code>STM</code> instance associated with the current request ID.</li> </ul> </li> </ul>"}]}